\documentclass{article}
\input{theorem}
\input{linear}
\usepackage{color}
\input{prooftree}
\usepackage{stmaryrd}
\def\erule#1#2{\begin{prooftree}#1\justifies#2\end{prooftree}}
\def\nrposs{ \mathsf{poss}}
\def\rposs{\ \mathsf{poss}}
\def\rtk{\ \mathsf{tk}}
\def\rvalid{\ \mathsf{valid}}
\def\dia{\Diamond}
\def\nec{\Square}
\def\next{\Circle}
\def\str{\blacksquare}
\def\ups{{\uparrow}}
\def\dns{{\downarrow}}
\def\chat#1{[#1]}
\def\lpar{\mathrel{\wp}}
\def\wat{\mathrel{\triangleright}}
\def\rto{\mathrel{\mathrm{to}}}
\def\lig{{\lightning}}
\def\succ{\mathsf{S}}
\def\rblue#1{\textcolor{blue}{#1}}
\def\from{\leftarrow}
\def\rto{\twoheadrightarrow}
\def\lto{\rightarrowtail}
\def\elam{\tilde\lambda}
\def\lam{\lambda}
\def\E{\mathcal E}
\def\V{\mathcal V}
\def\coe#1{\{z^{#1}\}}
\begin{document}

\section{Reconstructing Theorem 3 of Arqu\`es \& Ber\'aud}

Define a predicate $\beta_G$ on formal power series by
$$\beta_G F := \qquad F = G + zF^2 + zF + 2z^2 {\partial \over \partial z}F$$
By finitely unrolling it out to whichever power of $z$ we're
interested in, we can see for any type $G$ there is a unique power series
$F$ that satisfies $\beta_G F$. Call it $M_G$. It's maps on oriented surfaces
where there's data $G$ attached at each vertex, and data $z$ attached at each edge.

Now we want to show for any type $G$ that's constant with respect to $z$ that
$$M_G = G[z M_{G+1}]$$
Here I'm using the list constructor $[F]$ to stand for the
geometric series $1 / (1 - F)$.

By universal property, it suffices to show $\beta_G(G[z M_{G+1}])$. I'm going to abbreviate
$H := M_{G+1}$. Our proof obligation is now
$$\beta_G(G[zH])$$
and we can transform it by expanding the definition of $\beta_G$:
$$ G[zH] = G + z(G[zH])^2 + z(G[zH]) + 2z^2 {\partial \over \partial z}(G[zH])$$
computing the derivative: (here's where we use $G_z = 0$)
$$ G[zH] = G + z(G[zH])^2 + z(G[zH]) + 2z^2 G[zH]^2(zH_z + H)$$
multiplying by $1-zH$ to cancel out a few copies of $[zH]$:
$$ G = G(1-zH) + zG^2[zH] + zG + 2z^2 G[zH](zH_z + H)$$
$$ GzH = zG^2[zH] + zG + 2z^2 G[zH](zH_z + H)$$
dividing by $Gz$:
$$ H = G[zH] + 1 + 2z [zH](zH_z + H)$$
multiplying by $1 - zH$ again:
$$ H - zH^2 = G + 1-zH + 2z (zH_z + H)$$
$$ H = G + 1 + zH^2 + zH + 2z^2 H_z $$ which is just
$\beta_{G+1}M_{G+1}$, which we know by having defined $M_{G+1}$ to have that property.

\subsection{Bijective Interpretation}
The proof above goes `backwards' from proof obligation to known fact, and is liberal
with doing operations that make sense on formal power series with rational coefficients.
We're going to now try to go forwards, and do only things that make sense as type isomorphisms.

\begin{lemma}[List-1]\\
 (Informal, Suggestive) If $H + MK \cong A + M + HK$, then $H \cong [K]A + M$.
\end{lemma}

\begin{proof}
  Suppose we have a bijection $f : H + MK \cong A + M + HK$.
  If we're given an $h : H$, then hit it with $f$. If it gives $HK$,
  maintain a stack of $K$ and keep hitting the $H$. If we get an $M$,
  pop off the stack and hit the $MK$, returning the $M$ if we underflow the stack.
  If we get an $A$, return it.
\cqed
\end{proof}

What actually makes this process guaranteed to terminate? In our case, $M$ is finite and $K$ has no
constant term, so that seems useful.

\begin{lemma}[List-2]\\
 If $GK \cong M$, then $G[K] \cong G + M[K]$.
\end{lemma}

\begin{proof}
$G[K] \cong G(1 + K[K]) \cong G + GK[K] \cong G + M[K]$.
\cqed
\end{proof}

\begin{lemma}
If type $H$ is maps with data $G+1$ at vertices, then
$G[zH]$ is maps with data $G$ at vertices.
\end{lemma}

\begin{proof}
   We construct a bijection.
  By assumption,
  $$H \cong G + 1 + zH^2 + zH + 2z^2 H_z $$
  We can add $zH$ to both sides
  $$H + zH \cong G + 1 + zH^2 + 2zH + 2z^2 H_z $$
  and now Lemma~List-1 applies, ($M = 1, K = zH, A =  G + 2zH + 2z^2 H_z$) yielding
  $$H  \cong [zH](G + 2zH + 2z^2 H_z) + 1 $$
  Multiply by $Gz$ to get
  $$GzH  \cong Gz[zH](G + 2zH + 2z^2 H_z) + Gz $$
  Use Lemma~List-2 ($M = Gz[zH](G + 2zH + 2z^2 H_z) + Gz, K = zH$) to see
  $$G[zH] \cong G + (Gz[zH](G + 2zH + 2z^2 H_z) + Gz)[zH]$$
  $$ \cong G + z(G[zH])^2 + 2z^2G[zH]^2(H + z H_z) + z(G[zH])$$
  $$ \cong G + z(G[zH])^2 + z(G[zH]) + 2z^2(G[zH])_z $$
  which shows $G[zH]$ to be the type of $G$-vertex maps.

  Somewhat more explicitly, consider $(g, \vec s) : G[zH]$. If $\vec s$ is empty, this is the
  vertex map with data $g$. Otherwise $s = (e, h) :: t$ with $(e, h) : zH$.
  Now $h$ is a map. We're going to pull off all the isthmically attached submaps
  of $h$ until we can't, making a stack of $zH$. If we get the exceptional branch of the vertex case,
  we take the head of the stack and return it if we can, returning $()$ otherwise.
  If we get a nonisthmic attachment, or $G$-data, we return it {\em with} the current stack.
  So we have computed $$h' : [zH](G + 2zH + 2z^2 H_z) + 1$$
  Remember that we still have $g :G$, $e : z$, and $t : [zH]$ sitting around.\\
  That $+1$ at the end where we immediately stack underflow becomes the root-loop case $zG[zH]$.\\
  The $[zH]G$ case where we hit some $G$-data becomes the isthmic attachment $z(G[zH])^2$.\\
  The cases $(2zH + 2z^2 H_z)[zH]$ (which come from $1$-data, or else nonisthmic attachment)
  become $2z^2[zH]^2(H + z H_z)$ which is the non-loop nonisthmic attachment case.
\cqed
\end{proof}

\vfil\eject
\subsection{Coming From Terms}
Consider the grammar
$$
\begin{tabular}{r@{ $::= $ }l}
  Normal $N$&$ \lambda x . R$\\
  Atomic $R$&$ R\ N \celse x$\\
\end{tabular}
$$
where variable occurrences are not linear but unrestricted. This grammar forces
lambdas to {\em not} occur in sequences. A single lambda here is equivalent to a sequence
of consecutive linear lambdas that permit local exchange. The number of terms with $n$ free variables
and $a$ applications satisfies
$$N_{na} = R_{(n+1)a}$$
$$R_{na} = n + \sum_{a_1 + a_2 = a} R_{na_1} N_{na_2}$$
so
$$R_{na} = n[a=0] + \sum_{a_1 + a_2 = a+1} R_{na_1} R_{(n+1)a_2}$$
so defining the generating function for atomic terms with $n$
free variables $R(n) = \sum_{a \ge 0} z^a R_{na}$ we get the familiar Dyck equation
$$R(n) = \sum_{a \ge 0} z^a R_{na} = n + \sum_{a \ge 0} z^a \sum_{a_1 + a_2 = a} R_{na_1} R_{(n+1)a_2}$$
$$= n + zR(n)R(n+1)$$
so the head of a spine is a choice from $n$, and the arguments are each $z R(n+1)$.
This is a special case of the type $G[zH]$, where $G = n$ and $H = R(n+1)$.

Let $M(V, E)$ be the type of maps on orientable surfaces where
vertices carry data $V$ and edges carry data $E$. I'm going to give an
explicit function (abbreviating $H := M(G+1,z)$)
$$f : G[zH] \to M(G, z)$$
which really ought to be a bijection, though I haven't carefully checked yet.
What $f$ does is produce a map from `an atomic term' where the head is a $G$ and the arguments
are maps. So to go all the way from a real atomic term to a map we just need to inductively
turn our arguments into maps first, then apply $f$. The way we define $f$ is by recourse
to thinking of $M(G, z)$ as being defined by the universal property of Tutte-decomposition.
So we'll actually define
$$\tau : G[zH] \to G + z(G[zH])^2 +  z(G[zH]) + 2z^2 (G[zH])_z$$
and let that account for how to decompose a term of type $G[zH]$ as if it were a map.
\vfil\eject
And before defining $\tau$ let's define a fiddly technical helper function
about which I don't have great intuition yet
$$\phi : H \to [zH] \to [zH](G + 2zH + 2z^2 H_z) + 1$$
The second argument to $\phi$ is sort of a stack.
Here's how to compute $\phi\ h\ s$. Tutte decomposition on $h$ gives
us $(G + 1) + zH^2 +  zH + 2z^2 H_z$. Let's split cases over that data:
\begin{itemize}
\item[Vertex Case 1:] $g:G$. Return $(s, g) : [zH]G$.
\item[Vertex Case 2:] $*:1$. If the stack $s$ is empty, return $*:1$. Otherwise
  $s = s_{hd}::s_{tl}$, so return $(s_{tl}, (0, s_{hd})) : [zH](2(zH))$.
\item[Isthmic Case:] $(e, h_1, h_2):zH^2$. Push and recursively call
  $\phi\ h_1\  ((e, h_2)::s)$
\item[Loop Case:] $(e, h_0):zH$. Return $(s, (1, (e, h_0))) : [zH](2(zH))$.
\item[Nonisthmic Case:] $q:2z^2H_z$. Return $(s, q) : [zH](2z^2H_z)$.
\end{itemize}
Now we're ready to define
$$\tau : G[zH] \to G + z(G[zH])^2 +  z(G[zH]) + 2z^2 (G[zH])_z$$
as follows. Let $(g, \vec s) : G[zH]$ be the argument to
$\tau$. If $\vec s$ is empty, return the
single-vertex map with data $g : G$. Otherwise $s = (e, h) :: t$ with
$(e, h) : zH$. Split cases on
$$\phi\ h\ [] : [zH](G + 2zH + 2z^2 H_z) + 1$$
remembering that we still have $g :G$, $e : z$, and $t : [zH]$
sitting around.
\begin{itemize}
\item[Case:] $(s', g') : [zH]G$. Return $(e, (g, t), (g', s')) : z(G[zH])^2$.
\item[Case:] $* : 1$. Return $(e, (g, t)) : zG[zH]$.
\item[Case:] $q : [zH](2zH + 2z^2H_z)$. Do the necessary work to transform
  $q, g, t$ into $(b, e', d) : 2(z (G[zH])_z)$. Return $(b, e, e', d) : 2z^2(G[zH])_z$.
  \end{itemize}

\vfil\eject

\subsection{$z$-derivative of $M^k$}
Recall that $[z]_z = [z]^2$ and so $[F]_z = F_z [F]^2$.

So if $M^k = (x+k)[z M^{k+1}]$, then
$$M^k_z = (x+k)[z M^{k+1}]_z$$
$$ = (x+k)(z M^{k+1})_z[z M^{k+1}]^2$$
$$ = (x+k)(M^{k+1} + z M_z^{k+1})[z M^{k+1}]^2$$

\subsection{Recalling Facts}
Let's recall some facts about extracting coefficients from power series:
$$\coe 0 (F^n) = (\coe 0 F)^n$$
$$\coe 1 (F^n) = n(\coe 1 F)(\coe 0 F)^{n-1}$$
$$\coe k(F G) = \sum_{k_1 + k_2 = k} \coe {k_1} F\coe {k_2} G$$
$$\coe k (F^n) = \sum_{|v| = n \atop \Sigma v = k} \prod_i \coe{v_i}F$$
$$\coe n [zF] = \sum_{m \ge 0}  \coe n F^m = \sum_{m \ge 0}  \coe n ((zF)^m)$$
$$=\sum_{m \ge 0} (\coe {n-m} F^{m } ) =\sum_{0 < m \le n} (\coe {n-m} F^{m } )$$
$$ =\sum_{0 < m \le n}    \sum_{|v| = m \atop \Sigma v = n-m } \prod_i \coe{v_i}F$$
\vfil\eject
$$
\begin{tabular}{r@{ $::= $ }l}
  Normal $N$&$ \lambda x . N \celse R$\\
  Atomic $R$&$ R\ N \celse x$\\
\end{tabular}
$$
$$
\begin{tabular}{r@{ $::= $ }l}
  Vertex $V$&$ \lambda e . V \celse E\ V\celse \square
  $\\
  Edge $E$&$ [V] \celse e \celse \{R\}
  $\\
\end{tabular}
$$

\noindent{\bf World Typing for Terms}
$$
\erule
{}
{x::s \prov x :: s}
\qquad
\erule
{\Gamma, t\ge s, x :: t \prov N :: t}
{\Gamma\prov \lam x . N :: s}
\qquad
\erule
{\Gamma \prov R :: t\qquad \Delta \prov N :: s \qquad t \ge s}
{\Gamma, \Delta \prov R\ N :: t}
$$

\noindent{\bf World Typing for Maps}
$$
\erule
{}
{ \prov \square : s}
\qquad
\erule
{\Gamma, e \prov V : s}
{\Gamma\prov \lam e . V : s}
\qquad
\erule
{\Gamma \prov E : s_1\qquad \Delta \prov V : s_2 \qquad t \ge s_1,s_2}
{\Gamma, \Delta \prov E\ V : t}
$$
$$
\erule
{}
{e \prov e : s}
\qquad
\erule
{\Gamma\prov V : s}
{\Gamma\prov [V] : s}
\qquad
\erule
{\Gamma \prov R :: s}
{\Gamma \prov \{R\} : s}
$$

\noindent{\bf Translation}
$$
\begin{tabular}{r@{ $=$ }l}
  $\{R\}^*$&$R$\\
  $[V]^*$&$\lambda x .  (x \wat V)$\\
  $R \wat \lambda e . V$&$\lambda x . (x \wat [\{R\}/e]V)$\\
  $R \wat  E\  V$&$ (R\  E^*) \wat V$\\
  $R \wat \square$&$R$\\
\end{tabular}
$$

\begin{lemma}
  If $E$ is closed and has no occurrences of $\{ \}$ in it, then
  $\prov E:s$ for any $s$.
\end{lemma}
\begin{lemma}
  Suppose $\Gamma \prov R::u$ and $u\ge s$.
  \begin{enumerate}
  \item If $\Delta,e  \prov V:s$,  then $\Gamma,\Delta \prov [\{R\}/e]V:u$.
  \item If $\Delta,e  \prov E:s$,  then $\Gamma,\Delta \prov [\{R\}/e]E:u$.
  \end{enumerate}
\end{lemma}
\begin{lemma}
Suppose $t \ge s$.
  \begin{enumerate}
  \item If $\Gamma\prov R::t$ and $\Delta \prov V : s$, then $\Gamma, \Delta \prov R \wat V :: t$.
  \item If $\Gamma \prov E:s$,  then $\Gamma\prov E^*:s$.
  \end{enumerate}
\end{lemma}


$$
\begin{tabular}{r@{ $::= $ }l}
  Vertex Type $\V$&$ \varepsilon^- \lto \V \celse \E\bullet \V\celse 1
  $\\
  Edge Type $\E$&$ [\V] \celse \varepsilon^+
  $\\
\end{tabular}
$$

\vfil\eject
Table of semiordered terms with four lambdas:

\begin{tabular}{l@{  }l}
$\elam v . \lam efg . e\ f\ g\ v$&$\lam v efg . g\ v\ e\ f$\\
$\elam v . \lam efg . e\ g\ f\ v$&$\lam v efg . g\ v\ f\ e$\\
$\elam v . \lam efg . g\ e\ f\ v$&$\lam v efg . g\ f\ v\ e$\\
$\elam v . \lam efg . g\ f\ e\ v$&$\lam v efg . g\ f\ e\ v$\\
$\elam v . \lam efg . f\ g\ e\ v$&$\lam v efg . g\ e\ f\ v$\\
$\elam v . \lam efg . f\ e\ g\ v$&$\lam v efg . g\ e\ v\ f$\\
$\elam v . \lam ef . e\ (\lam g . f\ g\ v)$&$\lam v ef  g . g\ e\ (f\ v)$\\
$\elam v . \lam ef . e\ (\lam g . g\ f\ v)$&$\lam v ef  g . g\ (f\ v)\ e$\\
$\elam v . \lam ef . f\ (\lam g . e\ g\ v)$&$\lam vefg.g\  v\ (f\ e)$\\
$\elam v . \lam ef . f\ (\lam g . g\ e\ v)$&$\lam vefg. g\ (f\ e)\ v$\\
$\elam v . \lam e . e\ (\lam f.f\ \ (\lam g . g\ v))$&$\lam vefg. g\ (f\ (e\ v))$\\
$\elam v . \lam ef . e\ f\ (\lam g.g\ v)$&$\lam vefg. g\ (f\ v\ e)$\\
$\elam v . \lam ef . f\ e\ (\lam g.g\ v)$&$\lam vefg. g\ (f\ e\ v)$\\
$\elam v . \lam e . e\ (\lam fg.f\ g\ v)$&$\lam vefg.g\ (e\ v)\ f$\\
$\elam v . \lam e . e\ (\lam fg.g\ f\ v)$&$\lam vefg.g\ f\ (e\ v)$\\
\end{tabular}
$$\lam v  efg . g\ v\ e\ f$$

\vfil\eject
$$
\begin{tabular}{r@{ $::= $ }l}
  Vertex $V$&$ \lambda e . V \celse E\ V \celse v
  %\celse \square
  $\\
  Edge $E$&$ \elam v . V \celse e
  %\celse [R]
  $\\
\end{tabular}
$$



Define two functions: $N^+$ which takes a normal term and outputs an
edge term, and $V + N$ which takes a vertex term and a normal term and
outputs an vertex term. We allow putting `stubs' $\{E\}$ where atomic
terms would otherwise go in the course of translation.
$$
\begin{tabular}{r@{ $=$ }l}
$V + \lam x .x\ N_1\ \cdots\ N_n $&$ N_1^+\ (\cdots(N_n^+\  V)\cdots)$\\
$V +\lam x . [x\ N_1\ \cdots\ N_n/y]N  $&$ N_1^+\ (\cdots(N_n^+\ (\lambda e.(V + [\{e\}/y]N)))\cdots)$\\
$N^+ $&$ \elam v . (v + N) $\\
$\{E\}^+ $&$ E$\\
\end{tabular}
$$

\begin{tabular}{lll}
$N$&$N^+$&$\lam$s\\
$\lam x.x$&  $\elam v.v $&1\\
$\lam x.\lam y.y\ x$&  $\elam v.\lam e.e\ v $&2\\
$\lam x. x\ (\lam s.s)$&  $\elam v. (\elam w.w)\  v $&2\\
$\lam x. x\ (\lam s. \lam y.y\ s)$&  $\elam v. (\elam w.\lam e.e\ w)\ v$&3\\
$\lam x. \lam y. y\ x\ (\lam s.s)$&  $\elam v.\lam e.e\ ((\elam w.w)\ v)$&3\\
$\lam x. \lam y.y\ (x\ (\lam s.s))$&  $\elam v.(\elam w.w)\ (\lam e.e\ v)$&3\\
$\lam x. \lam y.y\ (\lam s.s)\ x$&  $\elam v.\lam e.(\elam w.w)\ (e\ v)$&3\\
$\lam x. x\ (\lam s.s\ (\lam t.t))$&  $\elam v. (\elam w.(\elam u.u)\ w)\ v$&3\\
$\lam x.x\ (\lam s.s)\ (\lam t.t)$&  $\elam v. (\elam w.w)\ ((\elam u.u)\ v)$&3\\
$\lam x. \lam y.\lam z. (z\ y)\ x $&  $\elam v. \lam e.\lam f. f (e\ v)$&3\\
$\lam x. \lam y. \lam z. z (y\ x)$&  $\elam v. \lam e.e\ (\lam f. f\ v)$&3\\
$\lam x. \lam y. y\ (\lam s.s\ x)$&  $\elam v. \lam e. (\elam w.e\ w)\ v$&3\\
\end{tabular}




\vfil\eject
Syntax is
$$
\begin{tabular}{r@{ $::= $ }l}
  Normal $N$&$ \lambda x . N \celse R$\\
  Atomic $R$&$ R\ N \celse x$\\
\end{tabular}
$$
and
$$
\begin{tabular}{r@{ $::= $ }l}
  Vertex $V$&$ \lambda e . V \celse E\ V \celse v \celse \square$\\
  Edge $E$&$ \elam v . V \celse e \celse [R]$\\
\end{tabular}
$$
The syntactic classes of vertices and edges are extended with
$\square$ and $[R]$ only for the sake of intermediate forms in the
translation. There should be a bijection between closed normal terms
and closed edge terms containing no $\square$, $[R]$. The $\tilde \lambda$ indicates
a lambda for $\rto$. All other lambdas are ordered $\lto$, all applications are ordered $\rto$.

\vskip1em\noindent{\bf Translation}

We define two functions, $E^*$ and $R \wat V$, both of which output normal terms.

Twelf-style:
$$
\begin{tabular}{r@{ $=$ }l}
  $(\elam v . V)^*$&$(\forall R. R \wat v = R) \imp \lambda x .  (x \wat V)$\\
  $R \wat \lambda e . V$&$(e^* = R) \imp \lambda x . x \wat V$\\
  $R \wat  E\  V$&$ (R\  E^*) \wat V$\\
\end{tabular}
$$

With stubs:
$$
\begin{tabular}{r@{ $=$ }l}
  $[R]^*$&$R$\\
  $(\elam v . V)^*$&$\lambda x .  (x \wat [\square/v]V)$\\
  $R \wat \lambda e . V$&$\lambda x . (x \wat [[R]/e]V)$\\
  $R \wat  E\  V$&$ (R\  E^*) \wat V$\\
  $R \wat \square$&$R$\\
\end{tabular}
$$
{\bf Examples}
$$(\tilde \lambda w.\lambda e.(\lambda v_1.(\lambda v_2.(\lambda v_3.e\ v_3)\ v_2)\ v_1)\  w)^* = $$
$$\lambda w.( \lambda e. e\  (\lambda v_1. v_1\ (\lambda v_2. v_2\ (\lambda v_3. v_3\ w))))$$


$$(\elam v.\lambda e_1e_2.e_2\ (e_1\ (\lambda e_3.e_3\ v)))^* = $$
$$\lambda v.  \lambda e_1.  \lambda e_2. \lambda e_3 . e_3 \ ((e_2\ e_1)\ v) $$




\vfil\eject

$$
\begin{tabular}{r@{ $::= $ }l}
   Skeletons $K$&$\lambda K \celse K\ K \celse \bullet$\\
\end{tabular}
$$
$$
\erule
{}
{\bullet : 1}
\qquad
\erule
{K : n+1}
{\lambda K : n}
\qquad
\erule
{K_1:n_1\qquad K_2:n_2}
{K_1\ K_2:n_1 + n_2}
$$

$$
\begin{tabular}{r@{ $::= $ }l}
  Pos. Types $A$&$a \celse B \rto A$\\
  Neg. Types $B$&$\bar a\celse A \rto B$\\
  Contexts $\Omega$&$\cdot \celse \Omega, x : B$\\
\end{tabular}
$$
If $K:n$ and $\Omega$ is length $n$, then there exists $M$ and $A$
such that $\Omega \prov M : A$

$$
\erule
{}
{x : \bar a \prov  x : a }
$$
$$
\erule
{\Omega, x : B \prov  M : A}
{\Omega \prov  \lambda x . M : B \rto A }
$$
$$
\erule
{ \Omega_1 \prov N : A \qquad y :  B, \Omega_2 \prov R : a  }
{x : A \rto B, \Omega_1, \Omega_2  \prov [x\ N/y]R : a  }
$$

\vfil\eject
\noindent{\bf Skeletons}
$$
\begin{tabular}{r@{ $::= $ }l}
  Normal Skeletons $K$&$\lambda K \celse  [T]$\\
  Skeleton Spines $T$&$()\celse (K;T)$\\
\end{tabular}
$$
{\bf Skeleton Size}
$$
\erule
{}
{() : 0}
\qquad
\erule
{T : n}
{[T] : n + 1}
\qquad
\erule
{K : n+1}
{\lambda K : n}
\qquad
\erule
{K:n_1\qquad T:n_2}
{(K;T):n_1 + n_2}
$$
{\bf Terms}
$$
\begin{tabular}{r@{ $::= $ }l}
  Normal terms $M$&$\lambda x . M \celse x \cdot S$\\
  Spines $S$&$()\celse (M; S)$\\
\end{tabular}
$$
{\bf Types}
$$
\begin{tabular}{r@{ $::= $ }l}
  Pos. Types $A$&$a \celse B \rto A$\\
  Neg. Types $B$&$\bar a\celse A \rto B$\\
  Contexts $\Omega$&$\cdot \celse \Omega, x : B$\\
  Pos. Tw. Types $X$&$q \celse Y \lto X$\\
  Neg. Tw. Types $Y$&$\bar q\celse X \rto Y$\\
  Tw. Contexts $\Delta$&$\cdot \celse \Delta, x : Y$\\
\end{tabular}
$$
{\bf Skeleton Filling}
If $\Omega$ has length $n$, and $K:n$, then $\Omega \prov K \mapsto M : A$ for a unique $M, A$.
If $\Omega$ has length $n$, and $T:n$, and $a$ is given, then $\Omega \prov T \mapsto S : B > a$ for a unique $S, B$.
$$
\erule
{\Omega \prov T \mapsto S : B > a}
{x : B, \Omega \prov  [T] \mapsto x \cdot S : a }
\qquad
\erule
{}
{ \prov () \mapsto () : \bar a > a}
$$
$$
\erule
{\Omega, x : B \prov  K \mapsto M : A}
{\Omega \prov \lambda K \mapsto  \lambda x . M : B \rto A }
\qquad
\erule
{ \Omega_1 \prov K \mapsto M : A \qquad \Omega_2 \prov T \mapsto S : B > a  }
{ \Omega_1, \Omega_2  \prov (K;T) \mapsto (M; S) : (A \rto B) > a  }
$$
{\bf Twisted Skeleton Filling}
If $\Omega$ has length $n$, and $K:n$, then $\Omega \prov K \mapsto M : X$ for a unique $M, X$.
If $\Omega$ has length $n$, and $T:n$, and $a$ is given, then $\Omega \prov T \mapsto S : Y > a$ for a unique $S, Y$.
$$
\erule
{\Omega \prov T \mapsto S : Y > q}
{x : Y, \Omega \prov  [T] \mapsto x \cdot S : q }
\qquad
\erule
{}
{ \prov () \mapsto () : \bar q > q}
$$
$$
\erule
{x:Y, \Omega \prov  K \mapsto M : X}
{\Omega \prov \lambda K \mapsto  \lambda x . M : Y \lto X }
\qquad
\erule
{ \Omega_1 \prov K \mapsto M : X \qquad \Omega_2 \prov T \mapsto S : Y > q  }
{ \Omega_1, \Omega_2  \prov (K;T) \mapsto (M; S) : (X \rto Y) > q  }
$$
\vfil\eject

\noindent{\bf Skeletons}
$$
\begin{tabular}{r@{ $::= $ }l}
  Directions $d$&$L \celse R$\\
  Normal Skeletons $K$&$\lambda_d K \celse J$\\
  Atomic Skeletons $J$&$  J \circ_d K \celse \bullet $\\
\end{tabular}
$$
{\bf Skeleton Size}
$$
\erule
{}
{\bullet : 1}
\qquad
\erule
{K : n+1}
{\lambda_d K : n}
\qquad
\erule
{J:n_1\qquad K:n_2}
{J \circ_d K:n_1 + n_2}
$$
{\bf Terms}
$$
\begin{tabular}{r@{ $::= $ }l}
  Normal terms $M$&$\lambda x . M \celse R$\\
  Atomic Terms $R$&$R\ N \celse x$\\
\end{tabular}
$$
{\bf Types}
$$
\begin{tabular}{r@{ $::= $ }l}
  Types $A$&$a \celse A \rto B \celse A \lto B$\\
  Contexts $\Omega$&$\cdot \celse \Omega, x : A$\\
\end{tabular}
$$
{\bf Skeleton Filling}
If $\Omega$ has length $n$, and $K:n$, then $\Omega \prov K \mapsto M : A$ for a unique $M, A$.

$$
\erule
{\Omega \prov J \mapsto R :: a }
{\Omega \prov J \mapsto R : a }
$$

$$
\erule
{}
{  A \prov \bullet  :: A }
$$
$$
\erule
{\Omega, A \prov K  : B}
{\Omega \prov  \lambda_R K  : A \rto B }
\qquad
\erule
{A,\Omega \prov  K  : B}
{\Omega \prov  \lambda_L K : A \lto B }
$$
$$
\erule
{ \Omega_1 \prov K : A \qquad   \Omega_2 \prov J  :: A \lto B  }
{ \Omega_1, \Omega_2  \prov J \circ_L K  :: B}
$$
$$
\erule
{ \Omega_1 \prov J  :: A \rto B  \qquad   \Omega_2 \prov K : A }
{ \Omega_1, \Omega_2  \prov J \circ_R K :: B}
$$
$K$ or $J$ are input, everything else is output.
Consider
$$K = \lambda_L\lambda_L\lambda_L(\bullet \circ_L \bullet) \circ_R \bullet$$
$$
\begin{prooftree}
  \[
  \[
   \[
  \justifies
  x : a \prov \bullet\mapsto x : a
  \]
  \[
  \justifies
  y: a\lto b \prov \bullet \mapsto y : a \lto b \rto c
  \]
  \justifies
  x : a, y: a\lto b\rto c \prov \bullet \circ_L \bullet \mapsto y\ x : b \rto c
  \]
  \[
  \justifies
  z: c \prov \bullet \mapsto z : c
  \]
  \justifies
  x : ?, y: ?, z : ? \prov (\bullet \circ_L \bullet) \circ_R \bullet \mapsto ? : ?
  \]
  \justifies
  \cdot \prov \lambda_L\lambda_L\lambda_L(\bullet \circ_L \bullet) \circ_R \bullet \mapsto ? : ?
\end{prooftree}
$$

\end{document}
